name: "OpenTofu"

on:
  push:
    branches: ["main"]
  pull_request:

permissions:
  contents: read

env:
  TF_VAR_PROXMOX_GITHUB_RUNNER_PASSWORD: ${{ secrets.PROXMOX_GITHUB_RUNNER_PASSWORD }}
  TF_VAR_PROXMOX_TERRAFORM_API_TOKEN: ${{ secrets.PROXMOX_TERRAFORM_API_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  TF_VAR_UNIFI_PASSWORD: ${{ secrets.UNIFI_PASSWORD }}
  TF_VAR_UNIFI_USERNAME: ${{ vars.UNIFI_USERNAME }}
  TF_VAR_UNIFI_URL: ${{ vars.UNIFI_URL }}
  TF_VAR_vm_password: ${{ secrets.VM_PASSWORD }}

jobs:
  opentofu:
    name: "OpenTofu"
    runs-on: self-hosted

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.8.6

      - name: OpenTofu fmt
        id: fmt
        run: tofu fmt -check

      - name: OpenTofu Init
        id: init
        run: tofu init

      - name: OpenTofu Validate
        id: validate
        run: tofu validate

      - name: OpenTofu Plan
        id: plan
        run: tofu plan

      - name: OpenTofu apply
        id: apply
        run: tofu apply -no-color -auto-approve

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "tofu\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('OpenTofu Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### OpenTofu Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### OpenTofu Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### OpenTofu Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### OpenTofu Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
